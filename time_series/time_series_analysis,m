% Problem Set II - Time Series Analysis
% Author: Stefano Blando
% Course: MQE

%% Housekeeping
clear; clc; close all;

%% GDP Analysis
% Load GDP Data
gdpData = readtable("GDP_EUarea19.csv", detectImportOptions("GDP_EUarea19.csv"));
date = gdpData.date;
gdp = gdpData.value;

% GDP Growth Rate
growth = diff(log(gdp));
date_growth = date(2:end);

% Split Sample
y_train = growth(1:end-4);
y_test = growth(end-3:end);

% ARIMA Model Grid Search (0 ≤ p,q ≤ 4)
models = {}; logL = []; numParams = []; desc = {}; idx = 1;
for p = 0:4
    for q = 0:4
        if p == 0 && q == 0
            continue
        end
        try
            mdl = arima(p,0,q);
            [est,~,LL] = estimate(mdl, y_train, 'Display','off');
            models{idx} = est;
            logL(idx) = LL;
            s = summarize(est);
            numParams(idx) = s.NumEstimatedParameters;
            desc{idx} = sprintf('ARIMA(%d,0,%d)', p,q);
            idx = idx + 1;
        catch
            continue
        end
    end
end

[aic, bic] = aicbic(logL', numParams', length(y_train));

% Table of Results
results_arima = table(desc', logL', aic, bic, numParams', 'VariableNames', {'Model','LogL','AIC','BIC','NumParams'});

% Select Best Models
[~, id_aic] = min(aic);
[~, id_bic] = min(bic);
best_aic_model = models{id_aic};
best_bic_model = models{id_bic};

% Forecast & RMSFE
[yhat_aic, mse_aic] = forecast(best_aic_model, 4, 'Y0', y_train);
rmsfe_aic = sqrt(mean((y_test - yhat_aic).^2));
[yhat_bic, mse_bic] = forecast(best_bic_model, 4, 'Y0', y_train);
rmsfe_bic = sqrt(mean((y_test - yhat_bic).^2));

summary_arima = table({desc{id_aic}; desc{id_bic}}, {'AIC'; 'BIC'}, [rmsfe_aic; rmsfe_bic], 'VariableNames', {'Model','Criterion','RMSFE'});

%% S&P500 Volatility Forecasting
% Load Data (assumes sp0 = prices, spR = returns)
load sp500_data.mat  % contains sp0, spR, dateR
r2 = (spR - mean(spR)).^2;
r_train = spR(1:end-10);
r_test = spR(end-9:end);
r2_test = r2(end-9:end);

%% ARCH Models (q = 1 to 10)
arch_models = {}; arch_rmse = zeros(10,1);
for q = 1:10
    mdl = garch(0,q);
    try
        est = estimate(mdl, r_train, 'E0', r_train(1:10), 'Display','off');
        fcast = forecast(est, 10, 'Y0', r_train);
        arch_models{q} = est;
        arch_rmse(q) = sqrt(mean((r2_test - fcast).^2));
    catch
        arch_rmse(q) = NaN;
    end
end

%% GARCH Models (p,q = 1 or 2)
garch_configs = [1 1; 2 1; 1 2; 2 2];
garch_models = {}; garch_rmse = zeros(4,1);
for i = 1:4
    p = garch_configs(i,1);
    q = garch_configs(i,2);
    mdl = garch(p,q);
    try
        est = estimate(mdl, r_train, 'E0', r_train(1:10), 'Display','off');
        fcast = forecast(est, 10, 'Y0', r_train);
        garch_models{i} = est;
        garch_rmse(i) = sqrt(mean((r2_test - fcast).^2));
    catch
        garch_rmse(i) = NaN;
    end
end

%% Summary Table
arch_names = arrayfun(@(q) sprintf('ARCH(0,%d)',q), 1:10, 'UniformOutput', false);
garch_names = { 'GARCH(1,1)', 'GARCH(2,1)', 'GARCH(1,2)', 'GARCH(2,2)' };
model_names = [arch_names'; garch_names'];
rmse_all = [arch_rmse; garch_rmse];
summary_vol = table(model_names, rmse_all, 'VariableNames', {'Model','RMSFE'});

%% Display Summaries
disp('Best ARIMA Models:');
disp(summary_arima);
disp('Volatility Model RMSFE Comparison:');
disp(summary_vol);
